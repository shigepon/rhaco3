<?php
ini_set('display_errors','On');
ini_set('html_errors','Off');
ini_set('error_reporting',E_ALL);
ini_set('xdebug.var_display_max_children',-1);
ini_set('xdebug.var_display_max_data',-1);
ini_set('xdebug.var_display_max_depth',-1);

if(ini_get('date.timezone') == ''){
	date_default_timezone_set('Asia/Tokyo');
}
if(extension_loaded('mbstring')){
	if('neutral' == mb_language()) mb_language('Japanese');
	mb_internal_encoding('UTF-8');
}
set_error_handler(function($n,$s,$f,$l){
	throw new \ErrorException($s,0,$n,$f,$l);
});
$dp = function($src){
	if(empty($src)) return;
	return '?>'.gzuncompress(base64_decode(trim(str_replace(PHP_EOL,'',$src))));
};
$lib=eval($dp(''));
$func=eval($dp('eJzVV19v01YUf24/hYk8bLfGSdmemmXsZRMP8DLxgBSnluPcpB7+V/ualg0kkmwCBgyGgI4N0SEhBkwFJm0STIh9mLukfIydc69tnDRMiDFti9Q0vufPPff3O+fc4/cPRKvRfHVhYV5akP747cr40vc7V+/BQ3W+mwYOdcNAilU5bH+qfT4/FxOaxoGEj/X5Uy81ArLueHaSqDL/h6rilxXYPpEakmIp9fm5bhgT21lVO6Sd9qy27Ryjse0QVZPsRJI7mlQ2MhqSSvyInlDlTlPpuh5RWpomHZAURVoGh5ZitO2EoG5Zw4CtDHz23ACe69ORJGk7obEaxaRnxSTycP9KtblirreqFb1S0UFaCBQD0FF0RdFLTjRNr+lLtZpWn+dHUmW3UQOFRkmnXpfdxcWpRRGai+jMuV11j5CQDTehiJzGBXOyHfcSCBTBtXqEWviswmYgs+PYPmElq26XqlxPLMud0AGLIPU8/gzO4RRRmPOhK/vwo2jSngY4tr2EiL3mPNhbRfPsgBq44dAkkedSAAbtmvtai4BN5mu/2DPftAK5YwYVg8auzz1pRsUMFqqwxvVO4Zdje56VJiS28FSqA2lAiZWnj4r4gqVxPIliN6DdaXbMBdVMFvn2ZqIhTeDfXKroU3qZhrkAKgp/kABwRxexiQMCewI5TZwjS2nIYMg+XIGAT5VzG/ZQZUo2KEKGtGVJyZc4jDKmGlJGNiIv7EAkcHhdKNQF14n7GQm7qtDUpA+k/YIAEInguKBZawEBUC3A1ATVwqw+w2LS8b6laQdRGE2YZ8flwPk2hWKsVFfUpll7r2bS1iKCW8Siy1wDa24K6JWKIWTNpZZRqfq8cFy/fHqxpwalOmu9ALpoKYjWRE/Z8D11rwzfupzEkJ9YQQ1M8VIjMu2gRzzbPOp7y8sJAaQKVR1NtQmPSeo4BJoUOCitdm3XU2U/6TUU/JnGRJlUCELqYpPCRf4R3ZKdPr2zfY71N1n/C2yeH0Z2bPuS726QjiRDKhCH2tzB+ObW6PmXo9N3dqvFJEk9Ko0ebr24fWHn18vjWzcney9ZU8u+9MwCMchqF3splu10UxVlDkDnIB0hCf0kDQISLy+TtRTEM11DtaSAHneXd9HiMWuy9YIBVEaQsxskR+QS6z/4R3EJ/gVguOEbIgPZMr5+ZrS9OTq7+ceTbdb/aXzhzOjhdxytrULE+hdY/wbrP2X9u6Ptb0c373GFu4AlG4Do8fjs5dFXWyXAoNG7Qe8kr3ZJPkZOrIdxZ5dcwsKYRNBHBDN9XmL81j5ue24HQOP++K3zumhia3QTSxjmjqEB5D8Lp4WsNBEUSjgIrOU3pN+28nuM1/XargtMxNtsgXN57WVT+Qtm84aZB6HnC9yT9ney/y1wjFXzzdtmOvh/Ut34T1KddzrfjoBgYHfn+X3Wv8Y520pjjw2usCE83mfDZ2x4iw2HbHhWEPzi96tA/AzG8L7iy9leYn2SRArngxs7smAPuK7gB59FkUhYweljFhIo4tS+eqqcNVNyirM5B10At3Q1Dtf5mGSCc+r65KMNh0R8fivCMRS8LaVumAYdhW+bS2DrYibN13RleVkp8wyDxuTop+BssmJWYTAxq8aiXIVZHAY/RZ91VieNYxJQC/5iyGd4EwD3xkuoYBQpHkQSuwmfGfCEzUIEE9TevdlrguXASXZr6Mo7CQ9cyjNKTJRSxl8xx+4yLIb214PzlRHCW1BTMSZ2N5QWfzFStGkWitv5IKURGz5gg0dscI8NnkJmltNOYGqg1mTutWGLHsDKxy8YbCHaMKWNd2t4NXbcGG5KSM2Nxv4az8c2vovgyTKS0GHmoTCetCzVmdwuB3zk8CHp4zD2kQ/fpaXaKTsHo5IEkCc9Ep/Mqwsajz+rTeYeq+UJEdfUKd86d4HveEL+qin0IPU9DBZGUeEnN80Ny1wcPXwILoK8/99gg/Osf74UJrZBafTo+Yufb7P+w+LyKGvwumLDr3mnOTe6fLEshOlXGl26Pnq+Ka4fGJHZ4AEbXmeDJ2zwI+YA9KXBlfEPz3Z+uSgiGN05N772uJwS7TD0iB1MorRqJxZO56Vhmw/qbzSd/wkaWdey'));
$cc=('eJyFVW1r2zAQ/uz8Cg1MbYM79rlZGrok6z6MddAWBqUIxT4nWh3bk+S03Zb/vpPkyC+tuwRio7t77nlOd5eP82pbTXgWwpOCQvKyoHnJUkjD4CmFdb0JoujPxPOTcg+CbYDumZBkRriUoEKffr+6vrkLaM9Mg/uIzMmokZyRiWc+4RHmcjWO8roNQZgQ7DmMoqk38VDB/yhFpC7e9pj2cEY4tTAjDtOJgXkHu0o9h/3KReTk5Fi7nuEukGwP6VqLNi404zmMO+lL8QRsuFQgqNzWKi0fC5rVRaLwEkP3gnTlEMcEa45+usa7LOCRfF9ehYH8lXMFZ8H7t9N6nr8BRSsBFROAAC4Z4sU+ojRunl/pXsHT0/PGOzTmqTVrBtpjhhAslxARtRXloyH0tdzwZPWUQGWRO2ECVC0KgqH24GAfJs0aS1LcCFZI1ui3Rkebp9SS6kgwvAMJOSSK8DQ26iGlOS+AZKLcEcWE9udFVpLHLRqJvh5aMbWdzYMmh8+xMYQaw7dWwgtVdvFCh9TLG5vjHIr2FN+lSCKyZ3kNMpzHzTdyBOoqZQrGCFhrTws2Iulmnc276WbzRixPX6qEp9FEXaUN3JhKBVKZ474sJ8n8ZKUAlmxDu5GozpeUKbjRwyZnkvg6hYYis3Pia3R57ENsNKlEVcrQb3kMm7ypS8qFHkLdlB+O8djIKBQhKMrMWfJyMNdMgg2NgyB2VI4t27be6TkWLqkVhHZ9+VXknJqHHgsBss6Vvh5b4CY2A4V1wGE9O/u8ull8oRfX11eLyPH0jG5qoDHSPGmW8yr8KXG1p6Dr1kG/C7q3geSVqKEl5Cpvy2mq/GDKu49IJ9Wd/3CviT64QL83Q0cmD/Asw05cm8hzga6Hh5UyCqCwCrrwUSz5byiz4WlXJk/19pr2kx0Al05bOje+L+8o7iYfapGRY2CXtrv9lpn1s0Nt+7fA/1slu86uGodJn5EdtSErVzqk5975rso1xyAO4td4tkGDBk5qIZAQLdgO+6Bxc5Qso0O7Z5Nyt+PquF2bwZSqrIaTaRx04MG8Ok8mhkP8Y7n6dHtJFwt6++32erX82x4sVxdLurharjTGYXKYzM//ATKDvEs=');
$rootdir = __DIR__;

if(!isset($_SERVER['REQUEST_URI']) || !isset($_SERVER['REQUEST_METHOD'])){
	$params = array();
	$conf = array();
	$argv = array_slice($_SERVER['argv'],1);
	$value = (empty($argv)) ? null : array_shift($argv);
	
	if(substr($value,0,1) == '-'){
		array_unshift($argv,$value);
		$value = null;
	}
	for($i=0;$i<sizeof($argv);$i++){
		if($argv[$i][0] == '-'){
			$k = substr($argv[$i],1);
			$v = (isset($argv[$i+1]) && $argv[$i+1][0] != '-') ? $argv[++$i] : '';
			if(isset($params[$k]) && !is_array($params[$k])) $params[$k] = array($params[$k]);
			$params[$k] = (isset($params[$k])) ? array_merge($params[$k],array($v)) : $v;
		}
	}
	if(isset($params['replace'])){
		$complile = function($path){
			$p = realpath($path);
			if($p === false) throw \RuntimeException($path.' not found');
		
			$src = '';
			if(is_dir($p)){
				foreach(new \DirectoryIterator($p) as $f){
					if($f->isFile()){
						$src = $src.file_get_contents($f->getPathname());
					}
				}
			}else{
				$src = file_get_contents($p);
			}
			return str_replace(PHP_EOL,'',base64_encode(gzcompress($src)));
		};
		if(is_dir(__DIR__.'/src/lib')){
			$self_src = file_get_contents(__FILE__);
			if(preg_match('/\$lib=eval\(\$dp\(\'(.+?)\'/',$self_src,$m)){
				$self_src = str_replace($m[1],$complile(__DIR__.'/src/lib'),$self_src);
			}
			if(preg_match('/\$func=eval\(\$dp\(\'(.+?)\'/',$self_src,$m)){
				$self_src = str_replace($m[1],$complile(__DIR__.'/src/func.php'),$self_src);
			}
			if(preg_match('/\$cc=\(\'(.+?)\'/',$self_src,$m)){
				$self_src = str_replace($m[1],$complile(__DIR__.'/src/cc.php'),$self_src);
			}
			if(\angela\Xml::set($self_src,'angela:template_list',$x)){
				$html = PHP_EOL;
				foreach(new \RecursiveDirectoryIterator(__DIR__.'/src/templates',\FilesystemIterator::SKIP_DOTS) as $f){
					$html .= sprintf('<rt:template name="%s">',substr($f->getFilename(),0,-5)).PHP_EOL
								.trim(file_get_contents($f->getPathname())).PHP_EOL
								.'</rt:template>'.PHP_EOL;
				}
				$x->escape(false);
				$x->value($html);
				$self_src = str_replace($x->plain(),$x->get(),$self_src);
			}
			foreach(new \RecursiveDirectoryIterator(__DIR__.'/src/script',\FilesystemIterator::SKIP_DOTS) as $f){
				if(\angela\Xml::set($self_src,'angela:'.substr($f->getFilename(),0,-4),$x)){
					$x->escape(false);
					$x->value(PHP_EOL.trim(substr(file_get_contents($f->getPathname()),5)).PHP_EOL.'# ');
					$self_src = str_replace($x->plain(),$x->get(),$self_src);
				}
			}
			file_put_contents($f=__FILE__,$self_src);
			print('writen: '.$f.PHP_EOL);
		}
		exit;
	}else if(isset($params['trim'])){
		$work = trim($params['trim']);
		if(empty($work)) $work = __DIR__;
		
		
		$count = 0;
		foreach(new \RecursiveIteratorIterator(
			new \RecursiveDirectoryIterator(
					$work,
					\FilesystemIterator::SKIP_DOTS|\FilesystemIterator::UNIX_PATHS
			),\RecursiveIteratorIterator::SELF_FIRST
		) as $f){
			if($f->isFile() && substr($f->getFilename(),-4) == '.php'){
				$src = file_get_contents($f->getPathname());
				$nsrc = str_replace(array("\r\n","\r","\n"),"\n",$src);
				$nsrc = preg_replace('/^(.+)[\040\t]+$/','\\1',$nsrc);
				if($src != $nsrc){
					file_put_contents($f->getPathname(),$nsrc);
					print(' '.$f->getPathname().PHP_EOL);
					$count++;
				}
			}
		}
		print('trimming: '.$count.PHP_EOL);
		exit;
	}else if(isset($params['cc'])){
		file_put_contents($f=substr(__FILE__,0,-4).'.cc.php',gzuncompress(base64_decode($cc)));		
		print('writen: '.$f.PHP_EOL);
		exit;
	}
}

# <angela:init>
$rootdir = (basename(__DIR__) == 'test') ? dirname(__DIR__) : __DIR__;
$conf = array();

// load app conf
if(is_file($f=$rootdir.'/bootstrap.php') || is_file($f=$rootdir.'/vendor/autoload.php')){
	ob_start();
		include_once($f);
	ob_end_clean();
}
// load angela conf
if(is_file($f=substr(__FILE__,0,-4).'.conf.php')){
	$conf = include($f);
	if(!is_array($conf)) throw new \RuntimeException('invalid '.$f);
	\angela\TestRunner::set_conf_file(realpath($f));
}
// test init
\angela\TestRunner::init($rootdir,$conf);

// default auto loader
set_include_path(get_include_path()
	.PATH_SEPARATOR.\angela\TestRunner::lib_dir()
	.PATH_SEPARATOR.\angela\TestRunner::lib_dir().'test'
);
spl_autoload_register(function($c){
	$cp = str_replace('\\','//',(($c[0] == '\\') ? substr($c,1) : $c));
	foreach(explode(PATH_SEPARATOR,get_include_path()) as $p){
		if(!empty($p) && ($r = realpath($p)) !== false && is_file($f=($r.'/'.$cp.'.php'))){
			require_once($f);
			break;
		}
	}
	return (class_exists($c,false) || interface_exists($c,false) || (function_exists('trait_exists') && trait_exists($c,false)));
},true,false);
# </angela:init>

if(!isset($_SERVER['REQUEST_URI']) || !isset($_SERVER['REQUEST_METHOD'])){
# <angela:cli>
if(isset($params['report'])){
	if(!extension_loaded('xdebug')) die('xdebug extension not loaded'.PHP_EOL);
	
	$report_dir = str_replace('\\','/',(empty($params['report']) ? $rootdir.'/report' : $params['report']));
	if(substr($report_dir,-1) == '/') $report_dir = substr($report_dir,0,-1);
	if(!is_dir($report_dir)) mkdir($report_dir,0777,true);
	
	$db = $report_dir.'/'.date('Ymd_His').(empty($value) ? '' : '_'.str_replace(array('\\','/'),'_',$value));
	if(isset($params['m'])) $db = $db.'_'.$params['m'];
	if(isset($params['b'])) $db = $db.'_'.$params['b'];
	$db = $db.'.report';

	\angela\Coverage::start($db);
}
\angela\TestRunner::info(isset($value));

if(isset($value)){
	\angela\TestRunner::verify_format(
			$value
			,(isset($params['m']) ? $params['m'] : null)
			,(isset($params['b']) ? $params['b'] : null)
			,true
	);
}else{
	\angela\TestRunner::run_all(true);
}
if((array_key_exists('xml',$params))){
	$exit_status = \angela\TestRunner::output('xml',$params['xml']);
}else{
	$exit_status = \angela\TestRunner::output();
}
# </angela:cli>

	exit(isset($exit_status) ? $exit_status : 0);
}else{
# <angela:web>
$in_value = function($key,$default=null){
	$params = isset($_GET) ? $_GET : array();
	if(!isset($params[$key])) return $default;
	return $params[$key];
};

$report_dir = ($in_value('report_dir') == '') ? $rootdir.'/report' : realpath($in_value('report_dir'));
$dblist = array();

if(is_dir($report_dir)){
	foreach(new RecursiveDirectoryIterator(
			$report_dir,
			\FilesystemIterator::CURRENT_AS_FILEINFO|\FilesystemIterator::SKIP_DOTS|\FilesystemIterator::UNIX_PATHS
	) as $e){
		if(preg_match('/^.+\.report$/',$e->getFilename())){
			$db_path = str_replace($report_dir.'/','',$e->getFilename());
			$dblist[$db_path] = $e->getMTime();
		}
	}
	if(!empty($dblist)){
		arsort($dblist);
		$dblist = array_combine(array_keys($dblist),array_keys($dblist));
	}
}
try{
	$uri = (isset($_SERVER['REQUEST_URI']) ? $_SERVER['REQUEST_URI'] : '');
	$db = $in_value('db');
	if(empty($db) && !empty($dblist)) $db = current($dblist);
	$db_file = \angela\Util::path_absolute($report_dir,$db);
	$template = new \angela\Template($uri.'?resource=');
	$template->vars('t',new \angela\Helper());
	$template_name = null;
	$appname = ucfirst(basename($rootdir));

	switch($in_value('view_mode')){
		case 'source':
			if($in_value('file') != ''){
				$template->vars('info',\angela\Coverage::file($db_file,$in_value('file')));
				$template->vars('file',$in_value('file'));
				$template_name = 'source';
			}
			break;
		case 'result':
			list($success,$fail,$none,$failure) = \angela\Coverage::test_result($db_file);
			$template->vars('success',$success);
			$template->vars('fail',$fail);
			$template->vars('none',$none);
			$template->vars('failure',$failure);
			$template_name = 'test_result';
			break;
		case 'time':
			$order = $in_value('order','test_path');
			list($test_list,$sum) = \angela\Coverage::test_time($db_file,$order);
			$template->vars('test_list',$test_list);
			$template->vars('sum',$sum);
			$template->vars('desc',(substr($order,0,1) == '-') ? '' : '-');
			$template_name = 'test_time';
			break;
		case 'coverage':
			$order = $in_value('order','file_path');
			list($file_list,$avg) = \angela\Coverage::all_file_list($db_file,$order);
			$template->vars('file_list',$file_list);
			$template->vars('avg',$avg);
			$template->vars('desc',(substr($order,0,1) == '-') ? '' : '-');
			$template_name = 'coverage_list';
			break;
		case 'help':
			$template_name = 'help';
			break;
		default:
	}
	if(empty($template_name)) $template_name = 'top';
	$template->vars('dblist',$dblist);
	$template->vars('db',$db);
	$template->vars('view_mode',$in_value('view_mode'));
	$template->vars('appname',$appname);
	$template->output(__FILE__,$template_name);
}catch(Exception $e){
	die($e->getMessage());
}
# </angela:web>
}
exit;
?>
<angela:template_list>
<rt:template name="coverage_list">
<rt:extends href="#index" />

<rt:block name="inner_content">
<table>
<tr>
	<td style="width:350px;">
		<div class="progress progress-striped active">
			<div class="bar bar-success" style="width: {$avg['covered']}%;"></div>
			<div class="bar bar-danger" style="width: {$avg['uncovered']}%;"></div>
		</div>
	</td>
	<td>
		<div style="height: 40px;">&nbsp;{$avg['avg']}%</div>
	</td>
</tr>
</table>
<rt:if param="{$path}">
	<h3>( {$path} )</h3>
</rt:if>
<rt:if param="{$file_list}">
	<table rt:param="file_list" rt:var="file" class="table table-striped table-bordered table-condensed">
	<thead>
	<tr>
		<th><a href="?view_mode=coverage&db={$db}&order={$desc}file_path">file</a></th>
		<th colspan="3"><a href="?view_mode=coverage&db={$db}&order={$desc}covered">covered</a></th>
	</tr>
	</thead>		
	<tbody>
	<tr>
		<td><a href="?view_mode=source&file={$file['file_path']}&db={$db}">{$file['file_path']}</a></td>
		<td style="width:110px;">
			<div class="progress">
				<div class="bar bar-success" style="width: {$file['covered']}%;"></div>
				<div class="bar bar-danger" style="width: {$file['uncovered']}%;"></div>
			</div>
		</td>
		<td style="width:30px; text-align: right;">{$file['percent']}%</td>
		<td style="width:80px; text-align: right; color: #666666;">{$file['covered_len']} / {$file['active_len']}</td>
	</tr>
	</tbody>
	</table>
</rt:if>
</rt:block>
</rt:template>
<rt:template name="help">
<rt:extends href="#index" />

<rt:block name="contents">
<div style="margin-bottom: 50px;">
	<h3>Requirements</h3>
	<pre>
PHP 5.3 (or later).
must have Xdebug 2.2.1 (or later) in order to gather code coverage information.
	</pre>
	
	<div style="margin-bottom: 50px;">
	<h4>Install Xdebug</h4>
	&gt;&nbsp;<a href="http://xdebug.org/docs/install">http://xdebug.org/docs/install</a>
	
	<h5>for MAMP</h5>
	
	/Applications/MAMP/bin/php/php5.4.4/conf/php.ini
	<pre>
[xdebug]
zend_extension="/Applications/MAMP/bin/php/php5.4.4/lib/php/extensions/no-debug-non-zts-20100525/xdebug.so"
xdebug.overload_var_dump = 0

xdebug.profiler_output_name = %t.%s.%p.profile
xdebug.profiler_output_dir = "/Applications/MAMP/bin/php/php5.4.4/profile"
;xdebug.profiler_enable = 1
xdebug.profiler_enable_trigger = 1

xdebug.default_enable = 1
xdebug.remote_enable  = 1
xdebug.remote_port    = 9000
xdebug.remote_handler = dbgp
xdebug.remote_autostart = 1
xdebug.remote_connect_back = 1
	</pre>
	<p>
	enable the profiler by using a GET/POST or COOKIE variable of the name <span class="text-warning">XDEBUG_PROFILE</span>.<Br />
	stepping PDT by sending an <span class="text-warning">XDEBUG_SESSION_START=ECLIPSE_DBGP</span>
	</p>
	<p>
		&gt; Xdebug Profiling Web Frontend <a href="https://github.com/jokkedk/webgrind">webgrind</a>
	</p>
	</div>
		
	
	<div style="margin-bottom: 50px;">
	<h3>Running Tests</h3>
	<pre>
&gt; php angela.php [class path or test file path]
	</pre>
	
	<h4>options</h4>
	
	<table class="table table-striped table-bordered table-condensed">
	<tbody>
	<tr>
		<td>-m</td>
		<td>method name</td>
	</tr>
	<tr>
		<td>-b</td>
		<td>block name</td>
	</tr>
	<tr>
		<td>-report</td>
		<td>filename for the report</td>
	</tr>
	</tbody>
	</table>
	
	<div style="margin-bottom: 20px;"></div>
	<h3>Test code for class</h3>
	<p>
		Test code for the class is described in the comment block.<br />
		(comment block /&lowast;&lowast;&lowast;〜&lowast;/ - that's <span class="text-error">three asterisks</span>)<br />
		test of the method described in the code of the method.<br />
		first line that starts with a # is a block name.<br />
		<span class="text-error">static::</span> introduces its class.
	</p>
	<pre>
&lt;?php
class Sample{
&nbsp;&nbsp;public function abc($str){
&nbsp;&nbsp;&nbsp;&nbsp;return '('.$str.')';
&nbsp;&nbsp;&nbsp;&nbsp;/&lowast;&lowast;&lowast;
&nbsp;&nbsp;&nbsp;&nbsp; &lowast; $self = new self();
&nbsp;&nbsp;&nbsp;&nbsp; &lowast; eq("(hoge)",$self->abc("hoge"));
&nbsp;&nbsp;&nbsp;&nbsp; &lowast;/
&nbsp;&nbsp;&nbsp;&nbsp;/&lowast;&lowast;&lowast;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# fuga
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$self = new self();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eq("(fuga)",$self->abc("fuga"));
&nbsp;&nbsp;&nbsp;&nbsp; &lowast;/
&nbsp;&nbsp;}
&nbsp;&nbsp;static public function def($str){
&nbsp;&nbsp;&nbsp;&nbsp;return '('.$str.')';
&nbsp;&nbsp;&nbsp;&nbsp;/&lowast;&lowast;&lowast;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eq("(hoge)",self::def("hoge"));
&nbsp;&nbsp;&nbsp;&nbsp; &lowast;/
&nbsp;&nbsp;}
&nbsp;&nbsp;/&lowast;&lowast;&lowast;
&nbsp;&nbsp;&nbsp;&nbsp;eq("(hoge)",self::def("hoge"));
&nbsp;&nbsp;&nbsp;&nbsp;$self = new self();
&nbsp;&nbsp;&nbsp;&nbsp;eq("(fuga)",$self->abc("fuga"));
&nbsp;&nbsp; &lowast;/
&nbsp;&nbsp; 
&nbsp;&nbsp;/&lowast;&lowast;&lowast;
&nbsp;&nbsp;&nbsp;&nbsp;# __setup__
&nbsp;&nbsp;&nbsp;&nbsp;eq(true,true);
&nbsp;&nbsp; &lowast;/
&nbsp;&nbsp;/&lowast;&lowast;&lowast;
&nbsp;&nbsp;&nbsp;&nbsp;# __teardown__
&nbsp;&nbsp;&nbsp;&nbsp;eq(true,true);
&nbsp;&nbsp; &lowast;/
}
	</pre>
	<p>
		__teardown__ and __setup__ is a special block name (rather than in the method) in the class. <br />
		__setup__ is called before the test block. <br />
		__teardown__ is called after the test block.
	</p>
	
	</div>
	
	
	<div style="margin-bottom: 50px;">
<h3>Assertion functions</h3>
<table class="table table-striped table-bordered table-condensed">
	<tbody>
	<tr>
		<td>eq($expected,$actual)</td>
		<td>$expected === $actual</td>
	</tr>
	<tr>
		<td>neq($expected,$actual)</td>
		<td>$expected !== $actual</td>
	</tr>
	<tr>
		<td>match($keyword,$string)</td>
		<td>match.  An array may be used to designate multiple needles.</td>
	</tr>
	<tr>
		<td>nomatch($keyword,$string)</td>
		<td>not match.  An array may be used to designate multiple needles.</td>
	</tr>
	</tbody>
</table>
</div>

<div style="margin-bottom: 50px;">
<h3>functions</h3>
<table class="table table-striped table-bordered table-condensed">
	<tbody>
	<tr>
		<td>test_map_url($map_name,$arg...)</td>
		<td>Get a remote url</td>
	</tr>
	<tr>
		<td>b()</td>
		<td>Get a instances of HTTP request class (<a href="#Http">Http</a>)</td>
	</tr>
	</tbody>
</table>
</div>


<a name="Http"></a>
<div style="margin-bottom: 50px;">
<h3>Class:Http method</h3>
<table class="table table-striped table-bordered table-condensed">
	<tbody>
	<tr>
		<td>do_post($url)</td>
		<td>POST requests</td>
	</tr>
	<tr>
		<td>do_get($url)</td>
		<td>GET requests</td>
	</tr>
	<tr>
		<td>vars($name,$value)</td>
		<td>Set up request parameter</td>
	</tr>
	<tr>
		<td>file_vars($name,$filepath)</td>
		<td>Set up request parameter</td>
	</tr>		
	<tr>
		<td>header($name,$value)</td>
		<td>Set up request header</td>
	</tr>
	<tr>
		<td>status()</td>
		<td>Gets the response status code</td>
	</tr>
	<tr>
		<td>head()</td>
		<td>Gets the response header</td>
	</tr>
	<tr>
		<td>body()</td>
		<td>Gets the response body</td>
	</tr>
	</tbody>
</table>
</div>

</rt:block>
</rt:template>
<rt:template name="index">
<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="utf-8">
	<title>Angela {$appname}</title>
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<link href="http://netdna.bootstrapcdn.com/twitter-bootstrap/2.3.1/css/bootstrap-combined.min.css" rel="stylesheet">	
	<style type="text/css"> 
		body{ padding-top: 60px }	
		.covered{ background-color: #ecffec; }
		.uncovered{ background-color: #ffecec; }
		.ignore{ background-color: #fcfcfc; }
		.popover{ width: 800px; }
		.code{ 
			font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; font-style: normal; font-variant: normal; font-weight: normal;
			width:100%; height: 16px; line-height: 0px; margin: 0; white-space: pre; padding-left: 10px; padding-right: 10px;		
		}
	</style>
	<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js"></script>
	<script src="http://netdna.bootstrapcdn.com/twitter-bootstrap/2.3.1/js/bootstrap.min.js"></script>
</head>
<body>
<div class="navbar navbar-inverse navbar-fixed-top">
	<div class="navbar-inner">
		<div class="container">
			<a class="brand" href="?view_mode={$view_mode}&db={$db}">{$appname}</a>
			<div class="nav-collapse collapse">
				<ul class="nav">
					<li class="{$t.cond_pattern_switch($view_mode,'file','active','')}"><a href="?view_mode=coverage&db={$db}">Coverage</a></li>
					<li class="{$t.cond_pattern_switch($view_mode,'result','active','')}"><a href="?view_mode=result&db={$db}">Result</a></li>
					<li class="{$t.cond_pattern_switch($view_mode,'time','active','')}"><a href="?view_mode=time&db={$db}">Time</a></li>						
					<li class="{$t.cond_pattern_switch($view_mode,'help','active','')}"><a href="?view_mode=help">Help</a></li>
				</ul>
			</div>
		</div>
	</div>
</div>
<div class="container">	
<rt:block name="contents">
	<form rt:ref="true">
		<input type="hidden" name="view_mode" />
		<input type="hidden" name="path" />
		<input type="hidden" name="file" />
		<input type="hidden" name="db" />
		<select rt:param="dblist" name="db" onChange="this.form.submit()" style="width:300px;"></select>
	</form>
	<rt:block name="inner_content">
	</rt:block>		
</rt:block>
</div>
<rt:block name="footer_block"></rt:block>
</body>
</html>
</rt:template>
<rt:template name="source">
<rt:extends href="#index" />

<rt:block name="inner_content">
<h2>{$info['file_path']}</h2>
<table rt:param="{$info['view']}" rt:var="f" rt:counter="cnt">
<tr class="{$f['class']} {$f['class']}_tooltip" data-content="{$t.htmlencode($t.nl2br($f['test_path']))}">
	<td align="right" style="width:50px;"><a name="{$cnt}"></a><a href="#{$cnt}">{$cnt}</a></td>
	<td class="code">{$t.htmlencode($f['value'])}</td>
</tr>
</table>
<div style="height:50px;"></div>

<script type="text/javascript">$('.covered_tooltip').popover({trigger: 'hover',html:true,placement:'top',title:'covered test'});</script>
</rt:block>
</rt:template>
<rt:template name="test_result">
<rt:extends href="#index" />

<rt:block name="inner_content">
<span class="label label-success">Success: {$success}</span>
<span class="label label-important">Failure: {$fail}</span>
<span class="label label-warning">None: {$none}</span>

<h3>Failure</h3>
<table rt:param="{$failure}" rt:var="result" class="table table-striped table-bordered table-condensed">
<thead>
<tr>
	<th>file</th>
	<th>line</th>
	<th>expected</th>
	<th>actual</th>
</tr>
</thead>
<tbody>
<tr>
	<td>{$result['location']['file']}</td>
	<td style="text-align: right;">{$result['location']['line']}</td>	
	<td style="padding: 0;"><pre style="border: 0; widht:100%; height:100%;">{$result['expected']}</pre></td>
	<td style="padding: 0;"><pre style="border: 0; widht:100%; height:100%;">{$result['actual']}</pre></td>
</tr>
</tbody>
</table>
</rt:block>
</rt:template>
<rt:template name="test_time">
<rt:extends href="#index" />

<rt:block name="inner_content">

<h3>Time ( {$sum} sec )</h3>
<table rt:param="{$test_list}" rt:var="result" class="table table-striped table-bordered table-condensed">
<thead>
<tr>
	<th><a href="?view_mode=time&db={$db}&order={$desc}test_path">test</a></th>
	<th style="width:50px;"><a href="?view_mode=time&db={$db}&order={$desc}exec_time">sec</a></th>
</tr>
</thead>
<tbody>
<tr>
	<td class="muted">{$result['test_path']}</td>
	<td class="{$t.time_color($result['exec_time'])}" style="text-align: right;">{$result['exec_time']}</td>	
</tr>
</tbody>
</table>
</rt:block>
</rt:template>
<rt:template name="top">
<rt:extends href="#help" />
</rt:template>
</angela:template_list>
