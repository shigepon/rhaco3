<?php
ini_set('display_errors','On');
ini_set('html_errors','Off');
ini_set('error_reporting',E_ALL);
ini_set('xdebug.var_display_max_children',-1);
ini_set('xdebug.var_display_max_data',-1);
ini_set('xdebug.var_display_max_depth',-1);

if(ini_get('date.timezone') == ''){
	date_default_timezone_set('Asia/Tokyo');
}
if(extension_loaded('mbstring')){
	if('neutral' == mb_language()) mb_language('Japanese');
	mb_internal_encoding('UTF-8');
}
set_error_handler(function($n,$s,$f,$l){
	throw new \ErrorException($s,0,$n,$f,$l);
});
$dp = function($src){
	if(empty($src)) return;
	return '?>'.gzuncompress(base64_decode(trim(str_replace(PHP_EOL,'',$src))));
};
$lib=eval($dp(''));
$func=eval($dp('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'));

$conf = array();
$ignore_path = array(__FILE__);

if(is_file($f=getcwd().'/bootstrap.php') || is_file($f=getcwd().'/vendor/autoload.php')){
	ob_start();
		include_once($f);
	ob_end_clean();
	$ignore_path[] = $f;
}
if(($al = spl_autoload_functions()) === false || empty($al)){
	if(is_dir($libdir=getcwd().'/lib') && strpos(get_include_path(),$libdir) === false){
		set_include_path($libdir.PATH_SEPARATOR.get_include_path());
	}
	spl_autoload_register(function($c){
		$cp = str_replace('\\','//',(($c[0] == '\\') ? substr($c,1) : $c));
		foreach(explode(PATH_SEPARATOR,get_include_path()) as $p){
			if(!empty($p) && ($r = realpath($p)) !== false){
				if(is_file($f=($r.'/'.$cp.'.php')) || is_file($f=($r.'/'.$cp.'/'.basename($cp).'.php'))){
					require_once($f);
					break;
				}
			}
		}
		return (class_exists($c,false) || interface_exists($c,false) || (function_exists('trait_exists') && trait_exists($c,false)));
	},true,false);
}
if(is_file($f=getcwd().'/'.substr(basename(__FILE__),0,-4).'.conf.php') || is_file($f=substr(__FILE__,0,-4).'.conf.php')){
	$conf = include($f);
	$ignore_path[] = realpath($f);
	if(!is_array($conf)) throw new \RuntimeException('invalid '.$f);
}
if(!isset($_SERVER['REQUEST_URI']) || !isset($_SERVER['REQUEST_METHOD'])){
	$entry_dir = $test_dir = $lib_dir = $func_dir = $report_dir = $setup_func = null;
	$params = $urls = array();
	$output_xml = false;
	
	$argv = array_slice($_SERVER['argv'],1);
	$value = (empty($argv)) ? null : array_shift($argv);
	
	if(substr($value,0,1) == '-'){
		array_unshift($argv,$value);
		$value = null;
	}	
	foreach(array('entry_dir','test_dir','lib_dir','func_dir','report_dir','urls','setup') as $k){
		if(array_key_exists($k,$conf)) $params[$k] = $conf[$k];
	}
	for($i=0;$i<sizeof($argv);$i++){
		if($argv[$i][0] == '-'){
			$k = substr($argv[$i],1);
			$v = (isset($argv[$i+1]) && $argv[$i+1][0] != '-') ? $argv[++$i] : '';
			if(isset($params[$k]) && !is_array($params[$k])) $params[$k] = array($params[$k]);
			$params[$k] = (isset($params[$k])) ? array_merge($params[$k],array($v)) : $v;
		}
	}
	if(isset($params['urls'])) $urls = $params['urls'];
	if(isset($params['entry_dir'])) $entry_dir = realpath($params['entry_dir']);
	if(isset($params['test_dir'])) $test_dir = realpath($params['test_dir']);
	if(isset($params['lib_dir'])) $lib_dir = realpath($params['lib_dir']);
	if(isset($params['func_dir'])) $func_dir = realpath($params['func_dir']);
	if(isset($params['setup'])) $setup_func = $params['setup'];	
	if(isset($params['report_dir'])) $report_dir = realpath($params['report_dir']);
	if(!isset($entry_dir)) $entry_dir = getcwd();
	if(!isset($report_dir)) $report_dir = getcwd().'/report';
	if(array_key_exists('xml',$params)) $output_xml = true;
	
	$complile = function($path){
		$p = realpath($path);
		if($p === false) throw \RuntimeException($path.' not found');
		
		$src = '';
		if(is_dir($p)){
			foreach(new \DirectoryIterator($p) as $f){
				if($f->isFile()){
					$src = $src.file_get_contents($f->getPathname());
				}
			}
		}else{
			$src = file_get_contents($p);
		}
		return str_replace(PHP_EOL,'',base64_encode(gzcompress($src)));
	};
	if(isset($params['replace'])){
		if(is_dir(__DIR__.'/src/lib') && is_file(__DIR__.'/src/func.php')){
			$self_src = file_get_contents(__FILE__);
			if(preg_match('/\$lib=eval\(\$dp\(\'(.+?)\'/',$self_src,$m)){
				$self_src = str_replace($m[1],$complile(__DIR__.'/src/lib'),$self_src);
			}
			if(preg_match('/\$func=eval\(\$dp\(\'(.+?)\'/',$self_src,$m)){
				$self_src = str_replace($m[1],$complile(__DIR__.'/src/func.php'),$self_src);
			}
			file_put_contents(__FILE__,$self_src);
		}
		exit;
	}
	\angela\TestRunner::init($entry_dir,$test_dir,$lib_dir,$func_dir,$setup_func,$ignore_path);
	if(is_array($urls)) \angela\TestRunner::set_urls($urls);
	
	if($output_xml) ob_start();
	\angela\TestRunner::info();
	
	if(isset($params['report'])){
		if(!extension_loaded('xdebug')) die('xdebug extension not loaded'.PHP_EOL);
		if(!is_dir($report_dir)) mkdir($report_dir,0777,true);
		$db = $report_dir.'/'.date('Ymd_His').(empty($value) ? '' : '_'.str_replace(array('\\','/'),'_',$value));
		if(isset($params['m'])) $db = $db.'_'.$params['m'];
		if(isset($params['b'])) $db = $db.'_'.$params['b'];
		$db = $db.'.report';
	
		\angela\Coverage::start($db,\angela\TestRunner::lib_dir(),array(\angela\TestRunner::lib_dir()));
	}
	if(isset($value)){
		\angela\TestRunner::verify_format(
				$value
				,(isset($params['m']) ? $params['m'] : null)
				,(isset($params['b']) ? $params['b'] : null)
				,true
		);
	}else{
		\angela\TestRunner::run_all(true);
	}
	if($output_xml){
		ob_end_clean();
		\angela\TestRunner::output('xml',$params['xml']);
	}else{
		\angela\TestRunner::output();
	}
}else{
	$resource_bin = array();
	$resource_bin['/splash.jpg'] = '';
	
	if(isset($_GET['resource'])){
		$resource = $_GET['resource'];
		
		if(isset($resource_bin[$resource])){
			$mime = 'application/octet-stream';	
			if(preg_match('/.+\.(\w+)$/',$resource,$m)){
				switch($m[1]){
					case 'jpg':
					case 'jpeg': $mime = 'image/jpeg;'; break;
					case 'html':  $mime = 'text/html'; break;
				}
				header('Content-Type: '.$mime.';');					
			}
			print(gzuncompress(base64_decode(trim(str_replace(PHP_EOL,'',$resource_bin[$resource])))));
			exit;
		}
		header('HTTP/1.1 404 Not Found');
		exit;			
	}
	$in_value = function($key,$default=null){
		$params = isset($_GET) ? $_GET : array();
		if(!isset($params[$key])) return $default;
		return $params[$key];
	};
	
	$report_dir = ($in_value('report_dir') == '') ? getcwd().'/report' : realpath($in_value('report_dir'));	
	$dblist = array();
	
	if(is_dir($report_dir)){
		foreach(new RecursiveDirectoryIterator(
				$report_dir,
				\FilesystemIterator::CURRENT_AS_FILEINFO|\FilesystemIterator::SKIP_DOTS|\FilesystemIterator::UNIX_PATHS
		) as $e){
			if(preg_match('/^.+\.report$/',$e->getFilename())){
				$db_path = str_replace($report_dir.'/','',$e->getFilename());
				$dblist[$db_path] = $e->getMTime();
			}
		}
		if(!empty($dblist)){
			arsort($dblist);
			$dblist = array_combine(array_keys($dblist),array_keys($dblist));
		}
	}
	try{
		$uri = (isset($_SERVER['REQUEST_URI']) ? $_SERVER['REQUEST_URI'] : '');
		$db = $in_value('db');
		if(empty($db) && !empty($dblist)) $db = current($dblist);
		$db_file = \angela\Util::path_absolute($report_dir,$db);
		$template = new \angela\Template($uri.'?resource=');
		$template->vars('t',new \angela\Helper());
		$template_name = null;
		$appname = ucfirst(basename(getcwd()));

		switch($in_value('view_mode')){
			case 'source':
				if($in_value('file') != ''){
					$template->vars('info',\angela\Coverage::file($db_file,$in_value('file')));
					$template->vars('file',$in_value('file'));
					$template_name = 'source';
				}
				break;
			case 'result':
				list($success,$fail,$none,$failure) = \angela\Coverage::test_result($db_file);
				$template->vars('success',$success);
				$template->vars('fail',$fail);
				$template->vars('none',$none);
				$template->vars('failure',$failure);
				$template_name = 'test_result';
				break;
			case 'time':
				$order = $in_value('order','test_path');
				list($test_list,$sum) = \angela\Coverage::test_time($db_file,$order);
				$template->vars('test_list',$test_list);
				$template->vars('sum',$sum);
				$template->vars('desc',(substr($order,0,1) == '-') ? '' : '-');
				$template_name = 'test_time';
				break;
			case 'coverage':
				$order = $in_value('order','file_path');
				list($file_list,$avg) = \angela\Coverage::all_file_list($db_file,$order);
				$template->vars('file_list',$file_list);
				$template->vars('avg',$avg);
				$template->vars('desc',(substr($order,0,1) == '-') ? '' : '-');
				$template_name = 'coverage_list';
				break;
			case 'help':
				$template_name = 'help';
				break;
			default:
		}
		if(empty($template_name)) $template_name = 'top';
		$template->vars('dblist',$dblist);
		$template->vars('db',$db);
		$template->vars('view_mode',$in_value('view_mode'));
		$template->vars('appname',$appname);
		$template->output(__FILE__,$template_name);
	}catch(Exception $e){
		die($e->getMessage());
	}
}
exit;
?>
<rt:template name="index">
	<!DOCTYPE html>
	<html lang="en">
	<head>
		<meta charset="utf-8">
		<title>Angela {$appname}</title>
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<link href="http://netdna.bootstrapcdn.com/twitter-bootstrap/2.3.1/css/bootstrap-combined.min.css" rel="stylesheet">	
		<style type="text/css"> 
			body{ padding-top: 60px }	
			.covered{ background-color: #ecffec; }
			.uncovered{ background-color: #ffecec; }
			.ignore{ background-color: #fcfcfc; }
			.popover{ width: 800px; }
			.code{ 
				font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; font-style: normal; font-variant: normal; font-weight: normal;
				width:100%; height: 16px; line-height: 0px; margin: 0; white-space: pre; padding-left: 10px; padding-right: 10px;		
			}
		</style>
		<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js"></script>
		<script src="http://netdna.bootstrapcdn.com/twitter-bootstrap/2.3.1/js/bootstrap.min.js"></script>
	</head>
	<body>
	<div class="navbar navbar-inverse navbar-fixed-top">
		<div class="navbar-inner">
			<div class="container">
				<a class="brand" href="?view_mode={$view_mode}&db={$db}">{$appname}</a>
				<div class="nav-collapse collapse">
					<ul class="nav">
						<li class="{$t.cond_pattern_switch($view_mode,'file','active','')}"><a href="?view_mode=coverage&db={$db}">Coverage</a></li>
						<li class="{$t.cond_pattern_switch($view_mode,'result','active','')}"><a href="?view_mode=result&db={$db}">Result</a></li>
						<li class="{$t.cond_pattern_switch($view_mode,'time','active','')}"><a href="?view_mode=time&db={$db}">Time</a></li>						
						<li class="{$t.cond_pattern_switch($view_mode,'help','active','')}"><a href="?view_mode=help">Help</a></li>
					</ul>
				</div>
			</div>
		</div>
	</div>
	<div class="container">	
	<rt:block name="contents">
		<form rt:ref="true">
			<input type="hidden" name="view_mode" />
			<input type="hidden" name="path" />
			<input type="hidden" name="file" />
			<input type="hidden" name="db" />
			<select rt:param="dblist" name="db" onChange="this.form.submit()" style="width:300px;"></select>
		</form>
		<rt:block name="inner_content">
		</rt:block>		
	</rt:block>
	</div>
	<rt:block name="footer_block"></rt:block>
	</body>
	</html>
</rt:template>

<rt:template name="top">
	<rt:extends href="#help" />
</rt:template>

<rt:template name="test_result">
	<rt:extends href="#index" />
	
	<rt:block name="inner_content">
	<span class="label label-success">Success: {$success}</span>
	<span class="label label-important">Failure: {$fail}</span>
	<span class="label label-warning">None: {$none}</span>
	
	<h3>Failure</h3>
	<table rt:param="{$failure}" rt:var="result" class="table table-striped table-bordered table-condensed">
	<thead>
	<tr>
		<th>file</th>
		<th>line</th>
		<th>expected</th>
		<th>actual</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>{$result['location']['file']}</td>
		<td style="text-align: right;">{$result['location']['line']}</td>	
		<td style="padding: 0;"><pre style="border: 0; widht:100%; height:100%;">{$result['expected']}</pre></td>
		<td style="padding: 0;"><pre style="border: 0; widht:100%; height:100%;">{$result['actual']}</pre></td>
	</tr>
	</tbody>
	</table>
	</rt:block>
</rt:template>

<rt:template name="test_time">
	<rt:extends href="#index" />
	
	<rt:block name="inner_content">
	
	<h3>Time ( {$sum} sec )</h3>
	<table rt:param="{$test_list}" rt:var="result" class="table table-striped table-bordered table-condensed">
	<thead>
	<tr>
		<th><a href="?view_mode=time&db={$db}&order={$desc}test_path">test</a></th>
		<th style="width:50px;"><a href="?view_mode=time&db={$db}&order={$desc}exec_time">sec</a></th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td class="muted">{$result['test_path']}</td>
		<td class="{$t.time_color($result['exec_time'])}" style="text-align: right;">{$result['exec_time']}</td>	
	</tr>
	</tbody>
	</table>
	</rt:block>
</rt:template>

<rt:template name="source">
	<rt:extends href="#index" />

	<rt:block name="inner_content">
	<h2>{$info['file_path']}</h2>
	<table rt:param="{$info['view']}" rt:var="f" rt:counter="cnt">
	<tr class="{$f['class']} {$f['class']}_tooltip" data-content="{$t.htmlencode($t.nl2br($f['test_path']))}">
		<td align="right" style="width:50px;"><a name="{$cnt}"></a><a href="#{$cnt}">{$cnt}</a></td>
		<td class="code">{$t.htmlencode($f['value'])}</td>
	</tr>
	</table>
	<div style="height:50px;"></div>
	
	<script type="text/javascript">$('.covered_tooltip').popover({trigger: 'hover',html:true,placement:'top',title:'covered test'});</script>
	</rt:block>
</rt:template>

<rt:template name="coverage_list">
	<rt:extends href="#index" />

	<rt:block name="inner_content">
	<table>
	<tr>
		<td style="width:350px;">
			<div class="progress progress-striped active">
				<div class="bar bar-success" style="width: {$avg['covered']}%;"></div>
				<div class="bar bar-danger" style="width: {$avg['uncovered']}%;"></div>
			</div>
		</td>
		<td>
			<div style="height: 40px;">&nbsp;{$avg['avg']}%</div>
		</td>
	</tr>
	</table>
	<rt:if param="{$path}">
		<h3>( {$path} )</h3>
	</rt:if>
	<rt:if param="{$file_list}">
		<table rt:param="file_list" rt:var="file" class="table table-striped table-bordered table-condensed">
		<thead>
		<tr>
			<th><a href="?view_mode=coverage&db={$db}&order={$desc}file_path">file</a></th>
			<th colspan="3"><a href="?view_mode=coverage&db={$db}&order={$desc}covered">covered</a></th>
		</tr>
		</thead>		
		<tbody>
		<tr>
			<td><a href="?view_mode=source&file={$file['file_path']}&db={$db}">{$file['file_path']}</a></td>
			<td style="width:110px;">
				<div class="progress">
					<div class="bar bar-success" style="width: {$file['covered']}%;"></div>
					<div class="bar bar-danger" style="width: {$file['uncovered']}%;"></div>
				</div>
			</td>
			<td style="width:30px; text-align: right;">{$file['percent']}%</td>
			<td style="width:80px; text-align: right; color: #666666;">{$file['covered_len']} / {$file['active_len']}</td>
		</tr>
		</tbody>
		</table>
	</rt:if>
	</rt:block>
</rt:template>

<rt:template name="help">
	<rt:extends href="#index" />
	
	<rt:block name="contents">
	<div style="margin-bottom: 50px;">
	<h3>Requirements</h3>
	<pre>
PHP 5.3 (or later).
must have Xdebug 2.2.1 (or later) in order to gather code coverage information.
	</pre>
	
	<div style="margin-bottom: 50px;">
	<h4>Install Xdebug</h4>
	&gt;&nbsp;<a href="http://xdebug.org/docs/install">http://xdebug.org/docs/install</a>
	
	<h5>for MAMP</h5>
	
	/Applications/MAMP/bin/php/php5.4.4/conf/php.ini
	<pre>
[xdebug]
zend_extension="/Applications/MAMP/bin/php/php5.4.4/lib/php/extensions/no-debug-non-zts-20100525/xdebug.so"
xdebug.overload_var_dump = 0

xdebug.profiler_output_name = %t.%s.%p.profile
xdebug.profiler_output_dir = "/Applications/MAMP/bin/php/php5.4.4/profile"
;xdebug.profiler_enable = 1
xdebug.profiler_enable_trigger = 1

xdebug.default_enable = 1
xdebug.remote_enable  = 1
xdebug.remote_port    = 9000
xdebug.remote_handler = dbgp
xdebug.remote_autostart = 1
xdebug.remote_connect_back = 1
	</pre>
	<p>
	enable the profiler by using a GET/POST or COOKIE variable of the name <span class="text-warning">XDEBUG_PROFILE</span>.<Br />
	stepping PDT by sending an <span class="text-warning">XDEBUG_SESSION_START=ECLIPSE_DBGP</span>
	</p>
	<p>
		&gt; Xdebug Profiling Web Frontend <a href="https://github.com/jokkedk/webgrind">webgrind</a>
	</p>
	</div>
		
	
	<div style="margin-bottom: 50px;">
	<h3>Running Tests</h3>
	<pre>
&gt; php angela.php [class path or test file path]
	</pre>
	
	<h4>options</h4>
	
	<table class="table table-striped table-bordered table-condensed">
	<tbody>
	<tr>
		<td>-m</td>
		<td>method name</td>
	</tr>
	<tr>
		<td>-b</td>
		<td>block name</td>
	</tr>
	<tr>
		<td>-report</td>
		<td>filename for the report</td>
	</tr>
	</tbody>
	</table>
	
	<div style="margin-bottom: 20px;"></div>
	<h3>Test code for class</h3>
	<p>
		Test code for the class is described in the comment block.<br />
		(comment block /&lowast;&lowast;&lowast;〜&lowast;/ - that's <span class="text-error">three asterisks</span>)<br />
		test of the method described in the code of the method.<br />
		first line that starts with a # is a block name.<br />
		<span class="text-error">static::</span> introduces its class.
	</p>
	<pre>
&lt;?php
class Sample{
&nbsp;&nbsp;public function abc($str){
&nbsp;&nbsp;&nbsp;&nbsp;return '('.$str.')';
&nbsp;&nbsp;&nbsp;&nbsp;/&lowast;&lowast;&lowast;
&nbsp;&nbsp;&nbsp;&nbsp; &lowast; $self = new self();
&nbsp;&nbsp;&nbsp;&nbsp; &lowast; eq("(hoge)",$self->abc("hoge"));
&nbsp;&nbsp;&nbsp;&nbsp; &lowast;/
&nbsp;&nbsp;&nbsp;&nbsp;/&lowast;&lowast;&lowast;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# fuga
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$self = new self();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eq("(fuga)",$self->abc("fuga"));
&nbsp;&nbsp;&nbsp;&nbsp; &lowast;/
&nbsp;&nbsp;}
&nbsp;&nbsp;static public function def($str){
&nbsp;&nbsp;&nbsp;&nbsp;return '('.$str.')';
&nbsp;&nbsp;&nbsp;&nbsp;/&lowast;&lowast;&lowast;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eq("(hoge)",self::def("hoge"));
&nbsp;&nbsp;&nbsp;&nbsp; &lowast;/
&nbsp;&nbsp;}
&nbsp;&nbsp;/&lowast;&lowast;&lowast;
&nbsp;&nbsp;&nbsp;&nbsp;eq("(hoge)",self::def("hoge"));
&nbsp;&nbsp;&nbsp;&nbsp;$self = new self();
&nbsp;&nbsp;&nbsp;&nbsp;eq("(fuga)",$self->abc("fuga"));
&nbsp;&nbsp; &lowast;/
&nbsp;&nbsp; 
&nbsp;&nbsp;/&lowast;&lowast;&lowast;
&nbsp;&nbsp;&nbsp;&nbsp;# __setup__
&nbsp;&nbsp;&nbsp;&nbsp;eq(true,true);
&nbsp;&nbsp; &lowast;/
&nbsp;&nbsp;/&lowast;&lowast;&lowast;
&nbsp;&nbsp;&nbsp;&nbsp;# __teardown__
&nbsp;&nbsp;&nbsp;&nbsp;eq(true,true);
&nbsp;&nbsp; &lowast;/
}
	</pre>
	<p>
		__teardown__ and __setup__ is a special block name (rather than in the method) in the class. <br />
		__setup__ is called before the test block. <br />
		__teardown__ is called after the test block.
	</p>
	
	</div>
	
	
	<div style="margin-bottom: 50px;">
	<h3>Assertion functions</h3>
	<table class="table table-striped table-bordered table-condensed">
		<tbody>
		<tr>
			<td>eq($expected,$actual)</td>
			<td>$expected === $actual</td>
		</tr>
		<tr>
			<td>neq($expected,$actual)</td>
			<td>$expected !== $actual</td>
		</tr>
		<tr>
			<td>meq($keyword,$string)</td>
			<td>match.  An array may be used to designate multiple needles.</td>
		</tr>
		<tr>
			<td>nmeq($keyword,$string)</td>
			<td>not match.  An array may be used to designate multiple needles.</td>
		</tr>
		<tr>
			<td>success()</td>
			<td>success</td>
		</tr>
		<tr>
			<td>fail($msg='failure')</td>
			<td>fail</td>
		</tr>
		<tr>
			<td>notice($msg)</td>
			<td>message</td>
		</tr>	
		</tbody>
	</table>
	</div>
	
	<div style="margin-bottom: 50px;">
	<h3>functions</h3>
	<table class="table table-striped table-bordered table-condensed">
		<tbody>
		<tr>
			<td>newclass($class_source)</td>
			<td>Get a unique instances of a class</td>
		</tr>
		<tr>
			<td>pre($text)</td>
			<td>Get a heredoc</td>
		</tr>
		<tr>
			<td>test_map_url($map_name,$arg...)</td>
			<td>Get a remote url</td>
		</tr>
		<tr>
			<td>b()</td>
			<td>Get a instances of HTTP request class (<a href="#Http">Http</a>)</td>
		</tr>
		<tr>
			<td>xml(&$xml,$src,$name=null)</td>
			<td>Get a instances of XML class (<a href="#Xml">Xml</a>)</td>
		</tr>
		</tbody>
	</table>
	</div>
	
	
	<a name="Http"></a>
	<div style="margin-bottom: 50px;">
	<h3>Class:Http method detail</h3>
	<table class="table table-striped table-bordered table-condensed">
		<tbody>
		<tr>
			<td>do_post($url)</td>
			<td>POST requests</td>
		</tr>
		<tr>
			<td>do_get($url)</td>
			<td>GET requests</td>
		</tr>
		<tr>
			<td>vars($name,$value)</td>
			<td>Set up request parameter</td>
		</tr>
		<tr>
			<td>file_vars($name,$filepath)</td>
			<td>Set up request parameter</td>
		</tr>		
		<tr>
			<td>header($name,$value)</td>
			<td>Set up request header</td>
		</tr>
		<tr>
			<td>status()</td>
			<td>Gets the response status code</td>
		</tr>
		<tr>
			<td>head()</td>
			<td>Gets the response header</td>
		</tr>
		<tr>
			<td>body()</td>
			<td>Gets the response body</td>
		</tr>
		</tbody>
	</table>
	</div>
	
	<a name="Xml"></a>
	<div style="margin-bottom: 50px;">
	<h3>Class:Xml method detail</h3>
	<table class="table table-striped table-bordered table-condensed">
		<tbody>
		<tr>
			<td>get()</td>
			<td>Gets the XML string</td>
		</tr>
		<tr>
			<td>in($name)</td>
			<td>Find of XML node</td>
		</tr>
		<tr>
			<td>in_attr($name)</td>
			<td>Gets the attribute</td>
		</tr>
		<tr>
			<td>value()</td>
			<td>Gets the Xml value</td>
		</tr>
		</tbody>
	</table>
	</div>
	
	</rt:block>

</rt:template>


