<?php
ini_set('display_errors','On');
ini_set('html_errors','Off');
ini_set('error_reporting',E_ALL);
ini_set('xdebug.var_display_max_children',-1);
ini_set('xdebug.var_display_max_data',-1);
ini_set('xdebug.var_display_max_depth',-1);

if(ini_get('date.timezone') == ''){
	date_default_timezone_set('Asia/Tokyo');
}
if(extension_loaded('mbstring')){
	if('neutral' == mb_language()) mb_language('Japanese');
	mb_internal_encoding('UTF-8');
}
set_error_handler(function($n,$s,$f,$l){
	throw new \ErrorException($s,0,$n,$f,$l);
});
$dp = function($src){
	if(empty($src)) return;
	return '?>'.gzuncompress(base64_decode(trim(str_replace(PHP_EOL,'',$src))));
};
$lib=eval($dp(''));
$func=eval($dp('eJzVWN2PFEUQf75L7n9oNiMzczfsLujTnSv6oOEBXpQHkttjMjvbuzcyX8wHHAoJu6vAKSgQ4OQjnhhE0Nyp8SMSEf6YdvbwyX/Bqu6Z2dm9Be9iRCVhM91dXVX9q19VV9/Le/1Ff7IVu2ZkeS4JFMlrvK2+OzU5EdAoDlyC47mpyVNTk5Xp6alJMs1On95YW2adFdZ5D8fkVd8IDIc41hJtEoku+dSMDK6tf2s1efR+cvrOGLmAhrEdkWR99cnt8xs/Xux/ektIpXYbnmdTI9Px++kbrPsB63yIMpWpgcP0qFI0qaV6+QlsK4wUqUkbcVslNcI/9IZhHokCw6RKy7BDqs4Njlo33Da1jfpBGkZvxq5Lg9lZejQGsbE2tCiIqSb0z8u25VJ5IR+2LBuG6hByJMPtY9b56j+BnvtvwscVbAc/YF7/2tlkbSU5t/Lbz2us83X//Nlk/QbHdDVfYp3zrHOddR6wzt1k7ZPk1j0ucBcQZ11Y+rZ/7mLywWoR1TAKLLd90ggC4wSRjtATx72guVmASGFgjsN5FFcHcU3VaLhpG4BOTlgtZYcV6tybXI2q5o7B3pE1jELLC6hhLuaTxAiJdJQbRo1OQ4dD+B4EA/zRYIXUajUijJJnhLBlWLYiu57rGJG5CCjMErksHf2rwE1OnNoSNXgSDX6eLx0wDS89L1K4/w9W7NgGKzglaHNrjJj6xyiRF9hBEIvAh7Fp0jBUtlfV/hHOkuTOd/2rK6MecjQlJ2zXZPyMAyr/fWdzpdtykPVus16PdX9hvYes+/MmEnuRBZa5r25s29tzExg3oDCoUAURPWShEUQKF5o4ZgR6M3Z8IcKn8As0g2CbRrqJ6aXkjBp3+NRPhesglgv6XZN6LfL6kkl9PIpK9hJc3PUKqDwA/DDaVFHLpbpbd0vlfOUgHuG18C2e64pKZoki8l7l3m0T27us9yEH9huoPcnFC8nyBdb5Eoe9+6z7gHUvb1xZBRZjiereYb3v+eTj7OPyk8dXoJiNK0KmbYQhGWjqrLPur9zUg6HiBO0c3MSbG4HjXIEi9PCwiE/dNRwK0Mu6XKwnozFWeWFpqqS4q1wjCnX8CILdzCFB3GUZcJR1XS43jJCibFGiDLbKOBaYzm3yJYwbcGzFD2hbD6hvowOlyvzh+vGFSkkrlTRYzRfkMnS4sibLWkGJqmpVbXe1igESp1Ikq1YFkVpBam5OsmZmRiaFd1ZeQneIJboESYD4pZyekIygHYKziDFnLY5Thk/wFNDDRasFiYML6bzU9EzYg5klJsBAVqC5HU3ehf/kYp0W9rIs9Mz0oJiKHKLQt60IAMKN87sWZgCjVNme1GxmtwRMRfYDpxyuiufDdAXmhOAp/msatq3HIQ10PJxiAiUiqmdkUhBq2Fs+FvrAzag1Gqj6tFIPZ7gH9VDFiIGF+u6SNiKXStSnQUQW/AbkTU14J84IgRT4qelRUpoDoYGKfOqUKBNDeXiZdT9nvWXWXWO9L3jJ+571zvGkgd8z2Bj0zuAqZBLMD9LyOuvyLpr88fAStt431/kmnqq9s5mar5OLsAna/JvYaIyunu//dC756BfWuYqtR6pvJJ0jugTt/TePnnx3GwzkzcxQKgvZ0VQGEBW+nfMCCZqmIJ8TZJEws5Cc0JfbXhPAhghrQmIu5XVovQP1UhGiKnmF7EmJBmsiAnxlvrqAnSSktEqGWC32zY3bMqx61+5RDb7nD+9PD8z5wXsOYMdhZb5efalajxZmkEO5N5rEJbDMjPDpMJZ1XJvfvVAuVRxeKiyniIAwilV+3HyRTvn7GEEbLvOO4SMF1m9sPLqfBrmzGgc20Ij1YHgfy3LvU7xmkQ7YjD69rmPJ2ULUI7j7ABpfBztw58EHL3O8jsMUxnrcNYlLoiY9o1yNLVaCWym1UA2gFi0G3nGeenUwEFkOzW/bgU9lGZsI0vJitykL09kSmM+rXTanybOz8tBbZS8ZLigyUuFwvQI8qFfKM1IFij2UE1kbd2AzDgLqRjr8D04oKtw1oL48AAwinw/yjiWkkTjjfL4GlN25M72IdBPOsllCk18Iueck47soVFlbnZfHTRsHN8LWEH2qi3DTzsvlIfNleYFfvrK6KRAFCu+LIp/1vsJ2ontPFMEhEgpkyyg2ysQGGGoDvLw9hJoCPntxVHuxig//phVA9wFEXartqQp2NvC+wwOm0UKdqYp89/DW4h8dpEb2AOBuHzywn7zhBQ5GxrGiQj4V1cOuwgrEgLZpcDLLOGgGnHGvvExjpfiywDllRLfGVWA3IdbTRnnT02df5Njo7Oxsqifbmm2EZ18hJocO7IdeMfn4WvJopXARpW5KS45NskV8AB9yoODANXYNunjWFT0m3mT9zx5u/HBBKEjuLPevfjukBp6BT713UhGeqqz3ES9jy9DFbuX1C+4pO9FJTbw0UcngBTGCDPgOoCClhzeI196fyUR4/w=='));
$cc=('eJyFVU1v4zYQPdu/ggGEpQRomz3bdYxiN+0eFsgCyc0ICFoa2dzIkkpSdtLC/71DUqIoO0oTIGI4M2/efPL3dbNv5qKI4VVDpURdsbLmOeQxfc1h2+5okvw7n0VZfQTJd8COXCqyIkIp0HHEfj48Pm0oG4kZfU7ImkwKyYLMZ/Yn7mH+up9GeV+GIFxK/hYnyXI2n2EE/0cpIW31scZyhDPBaYCZUFjOLcwNHBr9Fo8zl5BPn/rcjQQbqvgR8q0J2qqwQpQwrWSKMpOwE0qDZGrf6rw+Vaxoq0xjEWN/QLrqEscaG45RvsVaVnAiP789xFT9XQoNC/rbx25ns2gHmjUSGi4BAbwzxEsjROnUZlFjegVvP9912rEVL53YMDAaK4TgpYKE6L2sT5bQj3onsvvXDBqHHJhJ0K2sCJq6i7P7WDdbTEn1JHmleBf/0jMWOXN8AvaWMlVQQqaJyFMbOOSsFBWQQtYHork0+qIqanLao5CYyrCG6/1qTXt4gT0h9RS+kxJR6TrEiz3SyG9qr0uohls8K5kl5MjLFlS8TrvfxBNom5xrmCLgpKNYsAdJ6HW1Dt2t1l2wIr+OEl4nHYWRdnBTUWpQ2l6Pw/Ih2T9FLYFn+9gtI2b8ZXUOfuqwv7kikXFhoMjqjkQGXfUtiD2mtGxqFXullDZ7Lhe3tzQhN9h7X8zEXSvdMpT73hxNZa/UzwOmZlvXJWbkvaHf0C7vuZBuy/TMbqyZB/HRfmRv48XTYPVujFbF0v8SaHqeWrawHK636Pdl+P88vzic3WdgfkE8ahATOTDshZJn14tryxU4/iml6ZDA5YAggYncNJU52fnD1dSWpdmnnU4/xJ/vsAWzVkPs3oCoSQak/nva21pJUG2pTbe7fu0ACtCYaFx7i8Wf909fv7M/Hh8fviZBrgJGHmNDRU6fl2OdjmuoFTZ6oO/zamrfPQPOy8ixXybXcaa/FD7RUJkhcJfsBd6w8K7pk1SJf6Au4ss+7e87Pbdi3DRV+PBrFSoPuTwDtn7AzFgz6xYDdu6LUjSxZZWDZeVzkpomC8CG9rYkbCO/2Ik9JiSA3kQvzyafQUNGo73cux4id4aBq8HSL8bLZIaZHOEPyRrf+lJd13O8GS89BePXpMM/4tCUxjlNafpeKQOzi2nKWimxaKziB2yvXm8g1vFyn/PwOmb14SB0/yZ2O1XpurlcqlbBGJ7t0WtyebV/UX6en+fru/8A9tgZ5A==');
$rootdir = __DIR__;

if(!isset($_SERVER['REQUEST_URI']) || !isset($_SERVER['REQUEST_METHOD'])){
	$params = array();
	$conf = array();
	$argv = array_slice($_SERVER['argv'],1);
	$value = (empty($argv)) ? null : array_shift($argv);
	
	if(substr($value,0,1) == '-'){
		array_unshift($argv,$value);
		$value = null;
	}
	for($i=0;$i<sizeof($argv);$i++){
		if($argv[$i][0] == '-'){
			$k = substr($argv[$i],1);
			$v = (isset($argv[$i+1]) && $argv[$i+1][0] != '-') ? $argv[++$i] : '';
			if(isset($params[$k]) && !is_array($params[$k])) $params[$k] = array($params[$k]);
			$params[$k] = (isset($params[$k])) ? array_merge($params[$k],array($v)) : $v;
		}
	}
	if(isset($params['replace'])){
		$complile = function($path){
			$p = realpath($path);
			if($p === false) throw \RuntimeException($path.' not found');
		
			$src = '';
			if(is_dir($p)){
				foreach(new \DirectoryIterator($p) as $f){
					if($f->isFile()){
						$src = $src.file_get_contents($f->getPathname());
					}
				}
			}else{
				$src = file_get_contents($p);
			}
			return str_replace(PHP_EOL,'',base64_encode(gzcompress($src)));
		};
		if(is_dir(__DIR__.'/src/lib')){
			$self_src = file_get_contents(__FILE__);
			if(preg_match('/\$lib=eval\(\$dp\(\'(.+?)\'/',$self_src,$m)){
				$self_src = str_replace($m[1],$complile(__DIR__.'/src/lib'),$self_src);
			}
			if(preg_match('/\$func=eval\(\$dp\(\'(.+?)\'/',$self_src,$m)){
				$self_src = str_replace($m[1],$complile(__DIR__.'/src/func.php'),$self_src);
			}
			if(preg_match('/\$cc=\(\'(.+?)\'/',$self_src,$m)){
				$self_src = str_replace($m[1],$complile(__DIR__.'/src/cc.php'),$self_src);
			}
			if(\angela\Xml::set($x,$self_src,'angela:template_list')){
				$html = PHP_EOL;
				foreach(new \RecursiveDirectoryIterator(__DIR__.'/src/templates',\FilesystemIterator::SKIP_DOTS) as $f){
					$html .= sprintf('<rt:template name="%s">',substr($f->getFilename(),0,-5)).PHP_EOL
								.trim(file_get_contents($f->getPathname())).PHP_EOL
								.'</rt:template>'.PHP_EOL;
				}
				$x->escape(false);
				$x->value($html);
				$self_src = str_replace($x->plain(),$x->get(),$self_src);
			}
			foreach(new \RecursiveDirectoryIterator(__DIR__.'/src/script',\FilesystemIterator::SKIP_DOTS) as $f){
				if(\angela\Xml::set($x,$self_src,'angela:'.substr($f->getFilename(),0,-4))){
					$x->escape(false);
					$x->value(PHP_EOL.trim(substr(file_get_contents($f->getPathname()),5)).PHP_EOL.'# ');
					$self_src = str_replace($x->plain(),$x->get(),$self_src);
				}
			}
			file_put_contents($f=__FILE__,$self_src);
			print('writen: '.$f.PHP_EOL);
		}
		exit;
	}else if(isset($params['cc'])){
		file_put_contents($f=substr(__FILE__,0,-4).'.cc.php',gzuncompress(base64_decode($cc)));		
		print('writen: '.$f.PHP_EOL);
		exit;
	}
}

# <angela:init>
$rootdir = (basename(__DIR__) == 'test') ? dirname(__DIR__) : __DIR__;
$conf = array();

// load app conf
if(is_file($f=$rootdir.'/bootstrap.php') || is_file($f=$rootdir.'/vendor/autoload.php')){
	ob_start();
		include_once($f);
	ob_end_clean();
}
// load angela conf
if(is_file($f=substr(__FILE__,0,-4).'.conf.php')){
	$conf = include($f);
	if(!is_array($conf)) throw new \RuntimeException('invalid '.$f);
}
// test init
\angela\TestRunner::init($rootdir,$conf);

// default auto loader
set_include_path(get_include_path()
	.PATH_SEPARATOR.\angela\TestRunner::lib_dir()
	.PATH_SEPARATOR.\angela\TestRunner::test_dir().'__lib__'
);
spl_autoload_register(function($c){
	$cp = str_replace('\\','//',(($c[0] == '\\') ? substr($c,1) : $c));
	foreach(explode(PATH_SEPARATOR,get_include_path()) as $p){
		if(!empty($p) && ($r = realpath($p)) !== false && is_file($f=($r.'/'.$cp.'.php'))){
			require_once($f);
			break;
		}
	}
	return (class_exists($c,false) || interface_exists($c,false) || (function_exists('trait_exists') && trait_exists($c,false)));
},true,false);
# </angela:init>

if(!isset($_SERVER['REQUEST_URI']) || !isset($_SERVER['REQUEST_METHOD'])){
# <angela:cli>
if(isset($params['report'])){
	if(!extension_loaded('xdebug')) die('xdebug extension not loaded'.PHP_EOL);
	
	$report_dir = str_replace('\\','/',(empty($params['report']) ? $rootdir.'/report' : $params['report']));
	if(substr($report_dir,-1) == '/') $report_dir = substr($report_dir,0,-1);
	if(!is_dir($report_dir)) mkdir($report_dir,0777,true);
	
	$db = $report_dir.'/'.date('Ymd_His').(empty($value) ? '' : '_'.str_replace(array('\\','/'),'_',$value));
	if(isset($params['m'])) $db = $db.'_'.$params['m'];
	if(isset($params['b'])) $db = $db.'_'.$params['b'];
	$db = $db.'.report';

	\angela\Coverage::start($db);
}
if(isset($value)){
	\angela\TestRunner::verify_format(
			$value
			,(isset($params['m']) ? $params['m'] : null)
			,(isset($params['b']) ? $params['b'] : null)
			,true
	);
}else{
	\angela\TestRunner::run_all(true);
}
if((array_key_exists('xml',$params))){
	$exit_status = \angela\TestRunner::output('xml',$params['xml']);
}else{
	$exit_status = \angela\TestRunner::output();
}
# </angela:cli>

	exit(isset($exit_status) ? $exit_status : 0);
}else{
# <angela:web>
$in_value = function($key,$default=null){
	$params = isset($_GET) ? $_GET : array();
	if(!isset($params[$key])) return $default;
	return $params[$key];
};

$report_dir = ($in_value('report_dir') == '') ? $rootdir.'/report' : realpath($in_value('report_dir'));
$dblist = array();

if(is_dir($report_dir)){
	foreach(new RecursiveDirectoryIterator(
			$report_dir,
			\FilesystemIterator::CURRENT_AS_FILEINFO|\FilesystemIterator::SKIP_DOTS|\FilesystemIterator::UNIX_PATHS
	) as $e){
		if(preg_match('/^.+\.report$/',$e->getFilename())){
			$db_path = str_replace($report_dir.'/','',$e->getFilename());
			$dblist[$db_path] = $e->getMTime();
		}
	}
	if(!empty($dblist)){
		arsort($dblist);
		$dblist = array_combine(array_keys($dblist),array_keys($dblist));
	}
}
try{
	$uri = (isset($_SERVER['REQUEST_URI']) ? $_SERVER['REQUEST_URI'] : '');
	$db = $in_value('db');
	if(empty($db) && !empty($dblist)) $db = current($dblist);
	$db_file = \angela\Util::path_absolute($report_dir,$db);
	$template = new \angela\Template($uri.'?resource=');
	$template->vars('t',new \angela\Helper());
	$template_name = null;
	$appname = ucfirst(basename($rootdir));

	switch($in_value('view_mode')){
		case 'source':
			if($in_value('file') != ''){
				$template->vars('info',\angela\Coverage::file($db_file,$in_value('file')));
				$template->vars('file',$in_value('file'));
				$template_name = 'source';
			}
			break;
		case 'result':
			list($success,$fail,$none,$failure) = \angela\Coverage::test_result($db_file);
			$template->vars('success',$success);
			$template->vars('fail',$fail);
			$template->vars('none',$none);
			$template->vars('failure',$failure);
			$template_name = 'test_result';
			break;
		case 'time':
			$order = $in_value('order','test_path');
			list($test_list,$sum) = \angela\Coverage::test_time($db_file,$order);
			$template->vars('test_list',$test_list);
			$template->vars('sum',$sum);
			$template->vars('desc',(substr($order,0,1) == '-') ? '' : '-');
			$template_name = 'test_time';
			break;
		case 'coverage':
			$order = $in_value('order','file_path');
			list($file_list,$avg) = \angela\Coverage::all_file_list($db_file,$order);
			$template->vars('file_list',$file_list);
			$template->vars('avg',$avg);
			$template->vars('desc',(substr($order,0,1) == '-') ? '' : '-');
			$template_name = 'coverage_list';
			break;
		case 'help':
			$template_name = 'help';
			break;
		default:
	}
	if(empty($template_name)) $template_name = 'top';
	$template->vars('dblist',$dblist);
	$template->vars('db',$db);
	$template->vars('view_mode',$in_value('view_mode'));
	$template->vars('appname',$appname);
	$template->output(__FILE__,$template_name);
}catch(Exception $e){
	die($e->getMessage());
}
# </angela:web>
}
exit;
?>
<angela:template_list>
<rt:template name="coverage_list">
<rt:extends href="#index" />

<rt:block name="inner_content">
<table>
<tr>
	<td style="width:350px;">
		<div class="progress progress-striped active">
			<div class="bar bar-success" style="width: {$avg['covered']}%;"></div>
			<div class="bar bar-danger" style="width: {$avg['uncovered']}%;"></div>
		</div>
	</td>
	<td>
		<div style="height: 40px;">&nbsp;{$avg['avg']}%</div>
	</td>
</tr>
</table>
<rt:if param="{$path}">
	<h3>( {$path} )</h3>
</rt:if>
<rt:if param="{$file_list}">
	<table rt:param="file_list" rt:var="file" class="table table-striped table-bordered table-condensed">
	<thead>
	<tr>
		<th><a href="?view_mode=coverage&db={$db}&order={$desc}file_path">file</a></th>
		<th colspan="3"><a href="?view_mode=coverage&db={$db}&order={$desc}covered">covered</a></th>
	</tr>
	</thead>		
	<tbody>
	<tr>
		<td><a href="?view_mode=source&file={$file['file_path']}&db={$db}">{$file['file_path']}</a></td>
		<td style="width:110px;">
			<div class="progress">
				<div class="bar bar-success" style="width: {$file['covered']}%;"></div>
				<div class="bar bar-danger" style="width: {$file['uncovered']}%;"></div>
			</div>
		</td>
		<td style="width:30px; text-align: right;">{$file['percent']}%</td>
		<td style="width:80px; text-align: right; color: #666666;">{$file['covered_len']} / {$file['active_len']}</td>
	</tr>
	</tbody>
	</table>
</rt:if>
</rt:block>
</rt:template>
<rt:template name="help">
<rt:extends href="#index" />

<rt:block name="contents">
<div style="margin-bottom: 50px;">
	<h3>Requirements</h3>
	<pre>
PHP 5.3 (or later).
must have Xdebug 2.2.1 (or later) in order to gather code coverage information.
	</pre>
	
	<div style="margin-bottom: 50px;">
	<h4>Install Xdebug</h4>
	&gt;&nbsp;<a href="http://xdebug.org/docs/install">http://xdebug.org/docs/install</a>
	
	<h5>for MAMP</h5>
	
	/Applications/MAMP/bin/php/php5.4.4/conf/php.ini
	<pre>
[xdebug]
zend_extension="/Applications/MAMP/bin/php/php5.4.4/lib/php/extensions/no-debug-non-zts-20100525/xdebug.so"
xdebug.overload_var_dump = 0

xdebug.profiler_output_name = %t.%s.%p.profile
xdebug.profiler_output_dir = "/Applications/MAMP/bin/php/php5.4.4/profile"
;xdebug.profiler_enable = 1
xdebug.profiler_enable_trigger = 1

xdebug.default_enable = 1
xdebug.remote_enable  = 1
xdebug.remote_port    = 9000
xdebug.remote_handler = dbgp
xdebug.remote_autostart = 1
xdebug.remote_connect_back = 1
	</pre>
	<p>
	enable the profiler by using a GET/POST or COOKIE variable of the name <span class="text-warning">XDEBUG_PROFILE</span>.<Br />
	stepping PDT by sending an <span class="text-warning">XDEBUG_SESSION_START=ECLIPSE_DBGP</span>
	</p>
	<p>
		&gt; Xdebug Profiling Web Frontend <a href="https://github.com/jokkedk/webgrind">webgrind</a>
	</p>
	</div>
		
	
	<div style="margin-bottom: 50px;">
	<h3>Running Tests</h3>
	<pre>
&gt; php angela.php [class path or test file path]
	</pre>
	
	<h4>options</h4>
	
	<table class="table table-striped table-bordered table-condensed">
	<tbody>
	<tr>
		<td>-m</td>
		<td>method name</td>
	</tr>
	<tr>
		<td>-b</td>
		<td>block name</td>
	</tr>
	<tr>
		<td>-report</td>
		<td>filename for the report</td>
	</tr>
	</tbody>
	</table>
	
	<div style="margin-bottom: 20px;"></div>
	<h3>Test code for class</h3>
	<p>
		Test code for the class is described in the comment block.<br />
		(comment block /&lowast;&lowast;&lowast;〜&lowast;/ - that's <span class="text-error">three asterisks</span>)<br />
		test of the method described in the code of the method.<br />
		first line that starts with a # is a block name.<br />
		<span class="text-error">static::</span> introduces its class.
	</p>
	<pre>
&lt;?php
class Sample{
&nbsp;&nbsp;public function abc($str){
&nbsp;&nbsp;&nbsp;&nbsp;return '('.$str.')';
&nbsp;&nbsp;&nbsp;&nbsp;/&lowast;&lowast;&lowast;
&nbsp;&nbsp;&nbsp;&nbsp; &lowast; $self = new self();
&nbsp;&nbsp;&nbsp;&nbsp; &lowast; eq("(hoge)",$self->abc("hoge"));
&nbsp;&nbsp;&nbsp;&nbsp; &lowast;/
&nbsp;&nbsp;&nbsp;&nbsp;/&lowast;&lowast;&lowast;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# fuga
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$self = new self();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eq("(fuga)",$self->abc("fuga"));
&nbsp;&nbsp;&nbsp;&nbsp; &lowast;/
&nbsp;&nbsp;}
&nbsp;&nbsp;static public function def($str){
&nbsp;&nbsp;&nbsp;&nbsp;return '('.$str.')';
&nbsp;&nbsp;&nbsp;&nbsp;/&lowast;&lowast;&lowast;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eq("(hoge)",self::def("hoge"));
&nbsp;&nbsp;&nbsp;&nbsp; &lowast;/
&nbsp;&nbsp;}
&nbsp;&nbsp;/&lowast;&lowast;&lowast;
&nbsp;&nbsp;&nbsp;&nbsp;eq("(hoge)",self::def("hoge"));
&nbsp;&nbsp;&nbsp;&nbsp;$self = new self();
&nbsp;&nbsp;&nbsp;&nbsp;eq("(fuga)",$self->abc("fuga"));
&nbsp;&nbsp; &lowast;/
&nbsp;&nbsp; 
&nbsp;&nbsp;/&lowast;&lowast;&lowast;
&nbsp;&nbsp;&nbsp;&nbsp;# __setup__
&nbsp;&nbsp;&nbsp;&nbsp;eq(true,true);
&nbsp;&nbsp; &lowast;/
&nbsp;&nbsp;/&lowast;&lowast;&lowast;
&nbsp;&nbsp;&nbsp;&nbsp;# __teardown__
&nbsp;&nbsp;&nbsp;&nbsp;eq(true,true);
&nbsp;&nbsp; &lowast;/
}
	</pre>
	<p>
		__teardown__ and __setup__ is a special block name (rather than in the method) in the class. <br />
		__setup__ is called before the test block. <br />
		__teardown__ is called after the test block.
	</p>
	
	</div>
	
	
	<div style="margin-bottom: 50px;">
<h3>Assertion functions</h3>
<table class="table table-striped table-bordered table-condensed">
	<tbody>
	<tr>
		<td>eq($expected,$actual)</td>
		<td>$expected === $actual</td>
	</tr>
	<tr>
		<td>neq($expected,$actual)</td>
		<td>$expected !== $actual</td>
	</tr>
	<tr>
		<td>meq($keyword,$string)</td>
		<td>match.  An array may be used to designate multiple needles.</td>
	</tr>
	<tr>
		<td>nmeq($keyword,$string)</td>
		<td>not match.  An array may be used to designate multiple needles.</td>
	</tr>
	<tr>
		<td>success()</td>
		<td>success</td>
	</tr>
	<tr>
		<td>fail($msg='failure')</td>
		<td>fail</td>
	</tr>
	<tr>
		<td>notice($msg)</td>
		<td>message</td>
	</tr>	
	</tbody>
</table>
</div>

<div style="margin-bottom: 50px;">
<h3>functions</h3>
<table class="table table-striped table-bordered table-condensed">
	<tbody>
	<tr>
		<td>newclass($class_source)</td>
		<td>Get a unique instances of a class</td>
	</tr>
	<tr>
		<td>pre($text)</td>
		<td>Get a heredoc</td>
	</tr>
	<tr>
		<td>test_map_url($map_name,$arg...)</td>
		<td>Get a remote url</td>
	</tr>
	<tr>
		<td>b()</td>
		<td>Get a instances of HTTP request class (<a href="#Http">Http</a>)</td>
	</tr>
	<tr>
		<td>xml(&$xml,$src,$name=null)</td>
		<td>Get a instances of XML class (<a href="#Xml">Xml</a>)</td>
	</tr>
	</tbody>
</table>
</div>


<a name="Http"></a>
<div style="margin-bottom: 50px;">
<h3>Class:Http method</h3>
<table class="table table-striped table-bordered table-condensed">
	<tbody>
	<tr>
		<td>do_post($url)</td>
		<td>POST requests</td>
	</tr>
	<tr>
		<td>do_get($url)</td>
		<td>GET requests</td>
	</tr>
	<tr>
		<td>vars($name,$value)</td>
		<td>Set up request parameter</td>
	</tr>
	<tr>
		<td>file_vars($name,$filepath)</td>
		<td>Set up request parameter</td>
	</tr>		
	<tr>
		<td>header($name,$value)</td>
		<td>Set up request header</td>
	</tr>
	<tr>
		<td>status()</td>
		<td>Gets the response status code</td>
	</tr>
	<tr>
		<td>head()</td>
		<td>Gets the response header</td>
	</tr>
	<tr>
		<td>body()</td>
		<td>Gets the response body</td>
	</tr>
	</tbody>
</table>
</div>

<a name="Xml"></a>
<div style="margin-bottom: 50px;">
<h3>Class:Xml method</h3>
<table class="table table-striped table-bordered table-condensed">
	<tbody>
	<tr>
		<td>get()</td>
		<td>Gets the XML string</td>
	</tr>
	<tr>
		<td>in($name)</td>
		<td>Find of XML node</td>
	</tr>
	<tr>
		<td>in_attr($name)</td>
		<td>Gets the attribute</td>
	</tr>
	<tr>
		<td>value()</td>
		<td>Gets the Xml value</td>
	</tr>
	</tbody>
</table>
</div>

</rt:block>
</rt:template>
<rt:template name="index">
<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="utf-8">
	<title>Angela {$appname}</title>
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<link href="http://netdna.bootstrapcdn.com/twitter-bootstrap/2.3.1/css/bootstrap-combined.min.css" rel="stylesheet">	
	<style type="text/css"> 
		body{ padding-top: 60px }	
		.covered{ background-color: #ecffec; }
		.uncovered{ background-color: #ffecec; }
		.ignore{ background-color: #fcfcfc; }
		.popover{ width: 800px; }
		.code{ 
			font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; font-style: normal; font-variant: normal; font-weight: normal;
			width:100%; height: 16px; line-height: 0px; margin: 0; white-space: pre; padding-left: 10px; padding-right: 10px;		
		}
	</style>
	<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js"></script>
	<script src="http://netdna.bootstrapcdn.com/twitter-bootstrap/2.3.1/js/bootstrap.min.js"></script>
</head>
<body>
<div class="navbar navbar-inverse navbar-fixed-top">
	<div class="navbar-inner">
		<div class="container">
			<a class="brand" href="?view_mode={$view_mode}&db={$db}">{$appname}</a>
			<div class="nav-collapse collapse">
				<ul class="nav">
					<li class="{$t.cond_pattern_switch($view_mode,'file','active','')}"><a href="?view_mode=coverage&db={$db}">Coverage</a></li>
					<li class="{$t.cond_pattern_switch($view_mode,'result','active','')}"><a href="?view_mode=result&db={$db}">Result</a></li>
					<li class="{$t.cond_pattern_switch($view_mode,'time','active','')}"><a href="?view_mode=time&db={$db}">Time</a></li>						
					<li class="{$t.cond_pattern_switch($view_mode,'help','active','')}"><a href="?view_mode=help">Help</a></li>
				</ul>
			</div>
		</div>
	</div>
</div>
<div class="container">	
<rt:block name="contents">
	<form rt:ref="true">
		<input type="hidden" name="view_mode" />
		<input type="hidden" name="path" />
		<input type="hidden" name="file" />
		<input type="hidden" name="db" />
		<select rt:param="dblist" name="db" onChange="this.form.submit()" style="width:300px;"></select>
	</form>
	<rt:block name="inner_content">
	</rt:block>		
</rt:block>
</div>
<rt:block name="footer_block"></rt:block>
</body>
</html>
</rt:template>
<rt:template name="source">
<rt:extends href="#index" />

<rt:block name="inner_content">
<h2>{$info['file_path']}</h2>
<table rt:param="{$info['view']}" rt:var="f" rt:counter="cnt">
<tr class="{$f['class']} {$f['class']}_tooltip" data-content="{$t.htmlencode($t.nl2br($f['test_path']))}">
	<td align="right" style="width:50px;"><a name="{$cnt}"></a><a href="#{$cnt}">{$cnt}</a></td>
	<td class="code">{$t.htmlencode($f['value'])}</td>
</tr>
</table>
<div style="height:50px;"></div>

<script type="text/javascript">$('.covered_tooltip').popover({trigger: 'hover',html:true,placement:'top',title:'covered test'});</script>
</rt:block>
</rt:template>
<rt:template name="test_result">
<rt:extends href="#index" />

<rt:block name="inner_content">
<span class="label label-success">Success: {$success}</span>
<span class="label label-important">Failure: {$fail}</span>
<span class="label label-warning">None: {$none}</span>

<h3>Failure</h3>
<table rt:param="{$failure}" rt:var="result" class="table table-striped table-bordered table-condensed">
<thead>
<tr>
	<th>file</th>
	<th>line</th>
	<th>expected</th>
	<th>actual</th>
</tr>
</thead>
<tbody>
<tr>
	<td>{$result['location']['file']}</td>
	<td style="text-align: right;">{$result['location']['line']}</td>	
	<td style="padding: 0;"><pre style="border: 0; widht:100%; height:100%;">{$result['expected']}</pre></td>
	<td style="padding: 0;"><pre style="border: 0; widht:100%; height:100%;">{$result['actual']}</pre></td>
</tr>
</tbody>
</table>
</rt:block>
</rt:template>
<rt:template name="test_time">
<rt:extends href="#index" />

<rt:block name="inner_content">

<h3>Time ( {$sum} sec )</h3>
<table rt:param="{$test_list}" rt:var="result" class="table table-striped table-bordered table-condensed">
<thead>
<tr>
	<th><a href="?view_mode=time&db={$db}&order={$desc}test_path">test</a></th>
	<th style="width:50px;"><a href="?view_mode=time&db={$db}&order={$desc}exec_time">sec</a></th>
</tr>
</thead>
<tbody>
<tr>
	<td class="muted">{$result['test_path']}</td>
	<td class="{$t.time_color($result['exec_time'])}" style="text-align: right;">{$result['exec_time']}</td>	
</tr>
</tbody>
</table>
</rt:block>
</rt:template>
<rt:template name="top">
<rt:extends href="#help" />
</rt:template>
</angela:template_list>
